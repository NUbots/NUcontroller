/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_MESSAGE_ACTUATION_SERVODATA_PB_H_INCLUDED
#define PB_MESSAGE_ACTUATION_SERVODATA_PB_H_INCLUDED
#include "./usb/protobuf/pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Message mainly for NUsense <-> NUC communication. NUsense will encode this message via nanopb after it queries all
 servo states and send it to the NUC. */
typedef struct _message_actuation_ServoData {
    /* / @brief The ID of the servo */
    uint32_t servo_id;
    /* / @brief True if we need to write new values to the hardware */
    bool dirty;
    /* / @brief Current error state of the servo
/ @note different to the dynamixel packet error status */
    uint32_t hardware_error;
    /* / @brief Most recent packet error received, to cache before RawSensors is emitted */
    uint32_t packet_error;
    /* / @brief True if we simulate where we think the servos should be
/ @note that we still write the commands to hardware */
    bool simulated;
    /* / @brief Our internal system torque target, this is never sent to the servo */
    int32_t torque;
    /* / @brief Whether the servo's torque is enabled, allowing it to move */
    bool torque_enabled;
    /* Cached values that are never read and are sent to the servos
/ @brief The integral gain of the velocity */
    float velocity_i_gain;
    /* / @brief The proportional gain of the velocity */
    float velocity_p_gain;
    /* / @brief The derivative gain of the position */
    float position_d_gain;
    /* / @brief The integral gain of the position */
    float position_i_gain;
    /* / @brief The proportional gain of the position */
    float position_p_gain;
    /* / @brief The first feedforward torque coefficient */
    float feedforward_1st_gain;
    /* / @brief The second feedforward torque coefficient */
    float feedforward_2nd_gain;
    /* / @brief The target pulse width modulation of the servo */
    float goal_pwm;
    /* / @brief The target current of the servo */
    float goal_current;
    /* / @brief The target velocity of the servo, not used by the servos */
    float goal_velocity;
    /* / @brief The target position of the servo */
    float goal_position;
    /* / @brief The target acceleration of the servo */
    float profile_acceleration;
    /* / @brief The target velocity of the servo, replacing moving speed in v1 protocol */
    float profile_velocity;
    /* Values that are either simulated or read from the servos
/ @brief The last read pulse width modulation of the servo */
    float present_pwm;
    /* / @brief The last read current of the servo */
    float present_current;
    /* / @brief The last read velocity of the servo */
    float present_velocity;
    /* / @brief The last read position of the servo */
    float present_position;
    /* / @brief The last read voltage of the servo */
    float voltage;
    /* / @brief The last read temperature of the servo */
    float temperature;
    /* / @brief Whether we have initialised this servo yet */
    bool initialised;
} message_actuation_ServoData;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define message_actuation_ServoData_init_default {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define message_actuation_ServoData_init_zero    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define message_actuation_ServoData_servo_id_tag 1
#define message_actuation_ServoData_dirty_tag    2
#define message_actuation_ServoData_hardware_error_tag 3
#define message_actuation_ServoData_packet_error_tag 4
#define message_actuation_ServoData_simulated_tag 5
#define message_actuation_ServoData_torque_tag   6
#define message_actuation_ServoData_torque_enabled_tag 7
#define message_actuation_ServoData_velocity_i_gain_tag 8
#define message_actuation_ServoData_velocity_p_gain_tag 9
#define message_actuation_ServoData_position_d_gain_tag 10
#define message_actuation_ServoData_position_i_gain_tag 11
#define message_actuation_ServoData_position_p_gain_tag 12
#define message_actuation_ServoData_feedforward_1st_gain_tag 13
#define message_actuation_ServoData_feedforward_2nd_gain_tag 14
#define message_actuation_ServoData_goal_pwm_tag 15
#define message_actuation_ServoData_goal_current_tag 16
#define message_actuation_ServoData_goal_velocity_tag 17
#define message_actuation_ServoData_goal_position_tag 18
#define message_actuation_ServoData_profile_acceleration_tag 19
#define message_actuation_ServoData_profile_velocity_tag 20
#define message_actuation_ServoData_present_pwm_tag 21
#define message_actuation_ServoData_present_current_tag 22
#define message_actuation_ServoData_present_velocity_tag 23
#define message_actuation_ServoData_present_position_tag 24
#define message_actuation_ServoData_voltage_tag  25
#define message_actuation_ServoData_temperature_tag 26
#define message_actuation_ServoData_initialised_tag 27

/* Struct field encoding specification for nanopb */
#define message_actuation_ServoData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   servo_id,          1) \
X(a, STATIC,   SINGULAR, BOOL,     dirty,             2) \
X(a, STATIC,   SINGULAR, UINT32,   hardware_error,    3) \
X(a, STATIC,   SINGULAR, UINT32,   packet_error,      4) \
X(a, STATIC,   SINGULAR, BOOL,     simulated,         5) \
X(a, STATIC,   SINGULAR, INT32,    torque,            6) \
X(a, STATIC,   SINGULAR, BOOL,     torque_enabled,    7) \
X(a, STATIC,   SINGULAR, FLOAT,    velocity_i_gain,   8) \
X(a, STATIC,   SINGULAR, FLOAT,    velocity_p_gain,   9) \
X(a, STATIC,   SINGULAR, FLOAT,    position_d_gain,  10) \
X(a, STATIC,   SINGULAR, FLOAT,    position_i_gain,  11) \
X(a, STATIC,   SINGULAR, FLOAT,    position_p_gain,  12) \
X(a, STATIC,   SINGULAR, FLOAT,    feedforward_1st_gain,  13) \
X(a, STATIC,   SINGULAR, FLOAT,    feedforward_2nd_gain,  14) \
X(a, STATIC,   SINGULAR, FLOAT,    goal_pwm,         15) \
X(a, STATIC,   SINGULAR, FLOAT,    goal_current,     16) \
X(a, STATIC,   SINGULAR, FLOAT,    goal_velocity,    17) \
X(a, STATIC,   SINGULAR, FLOAT,    goal_position,    18) \
X(a, STATIC,   SINGULAR, FLOAT,    profile_acceleration,  19) \
X(a, STATIC,   SINGULAR, FLOAT,    profile_velocity,  20) \
X(a, STATIC,   SINGULAR, FLOAT,    present_pwm,      21) \
X(a, STATIC,   SINGULAR, FLOAT,    present_current,  22) \
X(a, STATIC,   SINGULAR, FLOAT,    present_velocity,  23) \
X(a, STATIC,   SINGULAR, FLOAT,    present_position,  24) \
X(a, STATIC,   SINGULAR, FLOAT,    voltage,          25) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,      26) \
X(a, STATIC,   SINGULAR, BOOL,     initialised,      27)
#define message_actuation_ServoData_CALLBACK NULL
#define message_actuation_ServoData_DEFAULT NULL

extern const pb_msgdesc_t message_actuation_ServoData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define message_actuation_ServoData_fields &message_actuation_ServoData_msg

/* Maximum encoded size of messages (where known) */
#define message_actuation_ServoData_size         144

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
